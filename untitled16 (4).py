# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1reMzE0Jr8YLp5g8KU-H1e1hI-6ITGdtn
"""

import pandas as pd

# Sample Dataset Creation
def create_sample_data():
    data = pd.DataFrame({
        'Ticket ID': [f"T00{i}" for i in range(1, 11)],
        'User ID': [f"U00{i}" for i in range(1, 11)],
        'Issue Type': [
            "Password Reset", "Network Issue", "Hardware Failure",
            "Software Installation", "Email Configuration",
            "Data Recovery", "Printer Issue", "VPN Connectivity",
            "Account Lockout", "Blue Screen Error"
        ],
        'Status': ["Open", "Open", "Closed", "Open", "In Progress",
                   "Open", "Closed", "Open", "In Progress", "Open"],
        'Assigned Agent': ["Unassigned", "Unassigned", "Agent 1",
                           "Unassigned", "Agent 2", "Unassigned",
                           "Agent 3", "Unassigned", "Agent 1", "Unassigned"],
        'Priority': ["High", "Medium", "Low", "High", "Medium",
                     "High", "Low", "Medium", "High", "High"]
    })
    return data

import streamlit as st
import pandas as pd
import numpy as np
from scipy.optimize import linear_sum_assignment

# Sample Data Loading
@st.cache_data
def load_data():
    return create_sample_data()

# Hungarian Method for Optimal Assignment
def assign_agents(data):
    cost_matrix = np.random.randint(1, 20, size=(len(data), 3))
    row_ind, col_ind = linear_sum_assignment(cost_matrix)

    for i, ticket_id in enumerate(data['Ticket ID']):
        data.loc[i, 'Assigned Agent'] = f"Agent {col_ind[i] + 1}"

    return data

# Streamlit App Layout
st.title("ðŸš¨ IT Support System - Ticket Management")

# Load sample dataset
data = load_data()

# Display tickets
st.subheader("ðŸ“‹ Current Support Tickets")
st.dataframe(data)

# Ticket Submission Form
st.subheader("âž• Submit a New Support Ticket")
with st.form(key='ticket_form'):
    user_id = st.text_input("User ID", value="")
    issue_type = st.text_input("Issue Type", value="")
    priority = st.selectbox("Priority", ["Low", "Medium", "High"])

    submitted = st.form_submit_button("Submit Ticket")
    if submitted:
        new_ticket = pd.DataFrame({
            'Ticket ID': [f"T{len(data) + 1}"],
            'User ID': [user_id],
            'Issue Type': [issue_type],
            'Status': ['Open'],
            'Assigned Agent': ['Unassigned'],
            'Priority': [priority]
        })
        data = pd.concat([data, new_ticket], ignore_index=True)
        st.success("âœ… Ticket submitted successfully!")

# Assign Agents Using Hungarian Method
if st.button("ðŸ”„ Assign Agents Using Hungarian Method"):
    data = assign_agents(data)
    st.success("âœ… Agents assigned successfully!")
    st.dataframe(data)

# Display Final Ticket Data
st.subheader("ðŸ“Œ Updated Ticket Information")
st.dataframe(data)



